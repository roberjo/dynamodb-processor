name: Test and Coverage

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test-and-coverage:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore DynamoDBProcessor.sln

    - name: Build
      run: dotnet build DynamoDBProcessor.sln --no-restore

    - name: Test with coverage (Unit Tests)
      run: |
        dotnet test src/DynamoDBProcessor.Tests/DynamoDBProcessor.Tests.csproj \
          --collect:"XPlat Code Coverage" \
          --results-directory ./coverage/unit \
          --logger:"console;verbosity=detailed" \
          --logger:"trx;LogFileName=test-results.trx"

    - name: Test with coverage (Integration Tests)
      run: |
        dotnet test src/DynamoDBProcessor.IntegrationTests/DynamoDBProcessor.IntegrationTests.csproj \
          --collect:"XPlat Code Coverage" \
          --results-directory ./coverage/integration \
          --logger:"console;verbosity=detailed" \
          --logger:"trx;LogFileName=test-results.trx"

    - name: Generate combined coverage report
      run: |
        reportgenerator \
          -reports:"./coverage/**/coverage.cobertura.xml" \
          -targetdir:"./coverage/report" \
          -reporttypes:"Html;Badges;MarkdownSummary" \
          -assemblyfilters:"+DynamoDBProcessor*;-DynamoDBProcessor.Tests*;-DynamoDBProcessor.IntegrationTests*"

    - name: Extract combined coverage metrics
      id: coverage
      run: |
        # Find all coverage files
        COVERAGE_FILES=$(find ./coverage -name "coverage.cobertura.xml")
        
        # Initialize variables
        TOTAL_LINES=0
        COVERED_LINES=0
        
        # Process each coverage file
        for file in $COVERAGE_FILES; do
          # Extract line-rate from each file
          LINE_RATE=$(grep -oP '(?<=<coverage line-rate=")[^"]*' "$file")
          
          # Get total lines and covered lines
          LINES=$(grep -oP '(?<=lines-covered=")[^"]*' "$file")
          TOTAL=$(grep -oP '(?<=lines-valid=")[^"]*' "$file")
          
          # Add to totals
          TOTAL_LINES=$((TOTAL_LINES + TOTAL))
          COVERED_LINES=$((COVERED_LINES + LINES))
        done
        
        # Calculate overall coverage
        if [ $TOTAL_LINES -gt 0 ]; then
          COVERAGE=$(echo "scale=2; ($COVERED_LINES/$TOTAL_LINES)*100" | bc)
        else
          COVERAGE=0
        fi
        
        echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
        echo "Coverage: $COVERAGE%"

    - name: Extract test results
      id: test-results
      run: |
        # Find all test result files
        TEST_FILES=$(find ./coverage -name "test-results.trx")
        
        # Initialize variables
        TOTAL_TESTS=0
        PASSED_TESTS=0
        
        # Process each test file
        for file in $TEST_FILES; do
          # Extract test counts
          TESTS=$(grep -oP '(?<=total=")[^"]*' "$file")
          PASSED=$(grep -oP '(?<=passed=")[^"]*' "$file")
          
          # Add to totals
          TOTAL_TESTS=$((TOTAL_TESTS + TESTS))
          PASSED_TESTS=$((PASSED_TESTS + PASSED))
        done
        
        # Calculate success rate
        if [ $TOTAL_TESTS -gt 0 ]; then
          SUCCESS_RATE=$(echo "scale=2; ($PASSED_TESTS/$TOTAL_TESTS)*100" | bc)
        else
          SUCCESS_RATE=0
        fi
        
        echo "success_rate=$SUCCESS_RATE" >> $GITHUB_OUTPUT
        echo "Success Rate: $SUCCESS_RATE%"

    - name: Update README with coverage
      run: |
        # Read the current README
        README_CONTENT=$(cat README.md)
        
        # Check if the badges section exists
        if [[ $README_CONTENT == *"## Test Coverage"* ]]; then
          # Update existing badges
          sed -i "s/!\[Test Coverage\].*/![Test Coverage](https://img.shields.io/badge/Test%20Coverage-${COVERAGE}%25-brightgreen)/" README.md
          sed -i "s/!\[Test Success Rate\].*/![Test Success Rate](https://img.shields.io/badge/Test%20Success%20Rate-${SUCCESS_RATE}%25-brightgreen)/" README.md
        else
          # Add new badges section
          echo -e "\n## Test Coverage\n" >> README.md
          echo "![Test Coverage](https://img.shields.io/badge/Test%20Coverage-${COVERAGE}%25-brightgreen)" >> README.md
          echo "![Test Success Rate](https://img.shields.io/badge/Test%20Success%20Rate-${SUCCESS_RATE}%25-brightgreen)" >> README.md
        fi

    - name: Commit and push if changed
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md
        git diff --quiet && git diff --staged --quiet || (git commit -m "Update test coverage statistics [skip ci]" && git push)

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: ./coverage/report

    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: ./coverage/**/test-results.trx 